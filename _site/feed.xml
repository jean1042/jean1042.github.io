<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-11T15:56:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">June in Cloud-Valley</title><subtitle>Interested in Cloud technology, Boxing, Reading, Social Welfare and Netflix.</subtitle><author><name>Jiyoon, Park</name><email>parkjiyoon1042@gmail.com</email></author><entry><title type="html">Terraform and IaC 기초</title><link href="http://localhost:4000/kubernetes/Terraform-and-IaC/" rel="alternate" type="text/html" title="Terraform and IaC 기초" /><published>2020-12-14T00:00:00+09:00</published><updated>2020-12-14T00:00:00+09:00</updated><id>http://localhost:4000/kubernetes/Terraform%20and%20IaC</id><content type="html" xml:base="http://localhost:4000/kubernetes/Terraform-and-IaC/">&lt;h1 id=&quot;terraform-and-iac-기초&quot;&gt;Terraform and IaC 기초&lt;/h1&gt;

&lt;p&gt;이번에 테라폼을 이용해서 DB인프라를 구축하는 티켓을 받았다. 살짝 TMI지만 받으면서 포지션도 원래 DevOps에서 약간 Back-end / Plug in 서비스 개발로 변경되었다. 지난번에 DB쪽 모니터링을 담당했는데 그 때 얻은 지식을 바탕으로 구축하는걸 그나마 잘 관찰..할 수 있게 되었다(ㅋㅋㅋㅋ디비 인프라 구축은 내가 아직 역량이 딸려서 못하고, 구축하는걸 잘 관찰하고 서폿 코드 짜는.. 조교 역할 정도..의 티켓). 그래도 팀 리더님이 시간 내주셔서 Terraform 기초 강의까지 해주셔서 안잊어버리고 싶어서 글로 남겨가며 복습 복습.&lt;/p&gt;

&lt;h3 id=&quot;terraform&quot;&gt;Terraform?&lt;/h3&gt;

&lt;p&gt;기본적인 컨셉은 원하는 인프라를 코드로 서술할 수 있다는 것.&lt;/p&gt;

&lt;p&gt;IaC를 가능하게 해주는 도구 중에 하나다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IaC는 뭔데? (Infrastructure as a Code)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인프라 구성을 소프트웨어와 같이 코드를 이용해 처리하는 것을 지칭한다. IaC는 클라우드와 Legacy한 인프라 자원의 어떻게 보면 아주아주 가장 큰 차이를 가져다주는 개념이다.&lt;/p&gt;

&lt;p&gt;Cloud 시대에 도입하면서, 그전과는 달리 ‘인프라’ 를 API로 제어할 수 있는 ‘인프라 코드 전환’ 의 세계가 열렸다. 예를 들면, AWS CLI를 켜서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;나 EC2서버 하나 생성해줄래?&lt;/code&gt;에 해당하는 command를 날리면 그걸 통해서 가상화된 서버가 하나 생성되는 것이다. 이 말을 다르게 해석하면, API를 활용해서 인프라 구성을 코드 형태로 관리하기 시작하게 되었다는 것이다. 이게 IaC고,  Cloud as a Service다. 기존 Legacy방식과의 가장 큰 차이점이기도 하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IaC 도구의 네가지 종류&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IaC Tool은 그 특성에 따라서 4가지 정도로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ad-hoc&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;단발성. 즉 script로 구현하는 방식이다. Ad-hoc 자체의 뜻은 “이것을 위해” “특별한 목적을 위해서” 인데 (태어나서 이런 단어 처음봄..) 어쨌든 일회용이다.&lt;/p&gt;

    &lt;p&gt;아무래도 일회용이고 스크립트 구현방식이다 보니 단점이 많은데&lt;/p&gt;

    &lt;p&gt;작성한 script를 해당 장비로 가서 직접 수행  / 모든 것을 직접 개발하고 직접 구현해야함 / 복잡한 형상과 설정이 필요하면 구현의 난이도가 올라감 /  코드 유지보수 문제로 귀결됨 / 스크립트를 작성한 엔지니어 말고는 알아볼 수 없는 상황을 초래함 / 서버 들어가서 하나하나 설치함..&lt;/p&gt;

    &lt;p&gt;주르륵 나열해서 써놔서 안중요해 보이지만, 코드 유지보수 면에서 인프라 엔지니어들한테 부담이 된다고 하셨다. 팀리더님이 예전에 Ad-hoc으로 관리하시면서 있었던 일화도 말씀해 주셨는데, 한줄로 요약하자면 뭔지도 모르고 그냥 무작정 설치했다는 이야기였다. (하여간 결론적으로 유지보수가 똥망할 수 있다는 이야기)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Configuration Management&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;인프라 배포 이후에 앱이 동작하기 위해서 필요한 서버 설정 작업을 어느 정도 자동화한 방식이다.&lt;/p&gt;

    &lt;p&gt;Configuration Management를 하기 위한 툴이 있고, 그럼 Ad-hoc방식보다는 조금 더 견고하게 선언을 해서 사용할 수 있다.&lt;/p&gt;

    &lt;p&gt;Ad-hoc에 비해 장점이 몇가지가 존재한다.&lt;/p&gt;

    &lt;p&gt;1) 중앙에서 대규모 분산 환경 관리가 가능하도록 설계됨.&lt;/p&gt;

    &lt;p&gt;(서버에 하나하나 들어가서 설치하는게 아니라 서버-클라 존재)&lt;/p&gt;

    &lt;p&gt;2) 멱등성을 보장해준다.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  **멱등성? (Idempotence)
  한글도 영어도..**태어나서 처음 들어본 말22.. 

  code를 여러 번 수행해도 동일한 결과를 가져올 수 있어야 한다는 개념이다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;멱등성 보장을 아주 쉬운 예시로 설명해주셨다.&lt;/p&gt;

    &lt;p&gt;a → b로 copy하는 코드를 만들고, 이걸 2번 수행했을 때, 첫번째 copy 후에 두 번째로 copy를 시도했을 때, 이미 값이 있으므로 fail이 떨어지게 해주는게 멱등성 보장이다.&lt;/p&gt;

    &lt;p&gt;CM tool의 예시로, 익히 알고 있는 ANSIBLE, chef(기능이 많음), saltstack.. 등이 있다.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  여담) Ansible의 이모저모

  Ansible 이 인기를 끌게 된건 '구조의 단순함' 때문이다. 
  SSH를 이용해서 명령 전달(SSH 프로토콜 사용 안하는 것이 추세이거늘..) 
  SSH만 이용해서 명령을 전달하므로, Client agent가 불필요하고, 네트워크만 확보되어 있으면 바로 도입해서 사용이 가능하다~

  단점은 다른 툴에 대비해서 성능이랑 보안에 취약하다. 
  (그래도 인기가 있는건 configuration만 잘 해주면 성능은 좀 괜찮아~ 봐줄께 여서 라고 함)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Server Template&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Template 방식으로 말아서 배포하는 구조를 가지는 것들을 말한다.&lt;/p&gt;

    &lt;p&gt;소프트웨어 수행 시에 필요한 설정, 패키지, OS 이미지를 스냅샷해서 이미지화한 후 배포하는 방식이다. 익히 알고 있는 Docker가 이 템플릿 방식에 속한다.&lt;/p&gt;

    &lt;p&gt;IaC 도구를 통해서 해당 이미지를 배포하고 구성하는 방식이 server template 방식이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Server Provisioning&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;여지껏 위 3가지는 서버 하나 내에서의 configuration이었지만, Server Provisioning 방식은 그것보다 한 단계 위의 인프라 환경 자체를 code 형태로 구성하는 방식이다. 서버, Virtual network VPC, Subnet.. 과 같은 인프라 환경 자체를 코드로 관리하도록 하는 방식.&lt;/p&gt;

    &lt;p&gt;오늘 내가 배운 Terraform이랑 익숙한 AWS cloudformation 등이 이 Server Provisioning 방식에 속한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iac-특징&quot;&gt;IaC 특징&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;반복 가능성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인프라 형상을 정의한 source code만 있으면 언제든지 동일한 인프라를 제작 가능하다. 만약에 동일한 형상의 인프라 환경이 여러 셋이 필요할 경우에, environment 설정을 분리하여 조합해서 인프라를 제작하는 것도 가능하다.&lt;/p&gt;

    &lt;p&gt;여러 명의 시스템 엔지니어가 인프라 제작에 뛰어들거나, 중간에 사람이 교체되어도 동일한 인프라를 제작할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;형상관리 versioning&lt;/p&gt;

    &lt;p&gt;인프라 형상도 코드화 되었기 때문에 git같은 관리 툴을 이용해 versioning해서 관리가 가능하다. (version control system) 원래 시스템 엔지니어는 인프라 히스토리를 알고 있을수록.. 개쩌는 SE가 된다고 한다. 노하우라는게 있기 때문! 근데 버전 컨트롤이 가능하고, 버전 별 인프라 구축 기록이 남으면서 이전 사람이 없어도, 인프라 히스토리를 쉽게 알게 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일회성 Disposability&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인프라에 걸리는 의존성을 최소화 시켜줌!! 이건 생성과 수정에 대한 작업 부담이 낮아진다는 이야기다.&lt;/p&gt;

    &lt;p&gt;운영팀에 속하는 DevOps도 한 두달 해보고, 지금 완전 개발팀에도 속해보고 있는데 이 두개 입장에서 봤을 때 두쪽 모두에게 인프라 환경을 바꾸는건 큰 부담이다. 그냥 혼자 끄적거리면서 콘솔 들어가서 슝~ 지우고 슝~ 만들면 되는건 실습환경일 때 뿐이다. 회사에서는 권한 하나 수정할래도 티켓 남기고, 담당자 지정하고, 승인받고, 그다음에 인프라를 변경해주신다. DB를 통째로 바꿔야 하거나, VM을 통째로 갈아끼우거나.. 그런 큰 스케일의 인프라 변경은 작업 부담이 클 수밖에 없다.&lt;/p&gt;

    &lt;p&gt;개발자가 언제나 환경을 쉽게 생성하고 수정하도록 해주는 특징은 진짜 큰 장점인 것 같다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;그래서 테라폼은?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform이 동작하는 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code - Plan - Apply&lt;/code&gt; 의 과정을 거친다.&lt;/li&gt;
  &lt;li&gt;Multi cloud providers를 서포트한다.&lt;/li&gt;
  &lt;li&gt;cloud service 뿐만 아니라 MySQL, Docker 등 다양한 플러그인을 서포트해준다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HCL&lt;/code&gt; 사용&lt;/p&gt;

    &lt;p&gt;configuration을 위한 전용 언어이다. 리소스를 블락으로 지정하고, 키=밸류 형태로 리소스 속성을 정의하는 구조!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;그래서 진짜 초간단 실습을 하나 찾아서 해봤다.&lt;/p&gt;

&lt;h2 id=&quot;terraform을-이용한-aws-ec2배포&quot;&gt;Terraform을 이용한 AWS EC2배포&lt;/h2&gt;

&lt;h3 id=&quot;1-terraform-설치-ec2용-ssh-key-pair정의&quot;&gt;1) Terraform 설치 EC2용 SSH key pair정의&lt;/h3&gt;

&lt;p&gt;테라폼을 한번 써보려고  &lt;a href=&quot;https://www.44bits.io/ko/post/terraform_introduction_infrastrucute_as_code&quot;&gt;https://www.44bits.io/ko/post/terraform_introduction_infrastrucute_as_code&lt;/a&gt; 를 참고해서 AWS에 서버를 배포해봤다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON ~ % brew install terraform // mac OS 이용자는 brew로 간단하게 설치 가능
Updating Homebrew...
==&amp;gt; Downloading https://homebrew.bintray.com/bottles-portable-ruby/portable-ruby-2.6.3_2.yosemite.bottle.tar.gz
##################################################################################################################################################################################################################################### 100.0%
==&amp;gt; Pouring portable-ruby-2.6.3_2.yosemite.bottle.tar.gz
==&amp;gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
==&amp;gt; New Formulae
attr              aws-console       docui             duf               inframap          json5             kubevela          lua@5.3           magic_enum        oakc              terracognita      terraform@0.13    vc
==&amp;gt; Updated Formulae
Updated 1010 formulae.
==&amp;gt; Deleted Formulae
dtrx                                                                                                                   unrar

==&amp;gt; Downloading https://homebrew.bintray.com/bottles/terraform-0.14.2.catalina.bottle.tar.gz
==&amp;gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/652bd739beb1f41d55f44d35bdce12c1b71a566efad21375079fc35bb89e34e5?response-content-disposition=attachment%3Bfilename%3D%22terraform-0.14.2.catalina.bottle.tar.gz%22&amp;amp;Policy=eyJTdG
######################################################################## 100.0%
==&amp;gt; Pouring terraform-0.14.2.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/terraform/0.14.2: 6 files, 63.9MB

mzc01-jiyoon@MZC01-JIYOON ~ % terraform version
Terraform v0.14.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;테라폼에-등장하는-몇-가지-등장인물들&quot;&gt;테라폼에 등장하는 몇 가지 등장인물들&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Provisioning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 프로세스나 서비스를 실행하기 위한 준비 단계&lt;/p&gt;

&lt;p&gt;네트워크, 컴퓨팅 자원을 준비하는 작업이랑 준비된 컴퓨팅 자원에 site package, application 의존성 준비하는 단계로 나뉘어진다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Provider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;테라폼이랑 외부 서비스를 연결해주는 기능을 하는 모듈이다.&lt;/p&gt;

&lt;p&gt;ex) AWS provider를 설정해서 AWS 서비스의 컴퓨팅 자원을 생성함.&lt;/p&gt;

&lt;p&gt;위에 언급했지만 AWS , GCP 같은 클라우드 provider들도 있고, Github, DataDog같은 서비스, MySQL, docker(오..) 도 있음.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;aws&quot; {
	access_key = &quot;xxxxxx&quot;
	secret_key = &quot;xxxxxx&quot;
	region = &quot;ap-northeast-2&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체 목록 링크 : &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;https://www.terraform.io/docs/providers/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;terraform 프로젝트 init&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v3.21.0...
- Installed hashicorp/aws v3.21.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run &quot;terraform init&quot; in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;EC2 서버에 SSH로 접속을 해야하기 때문에, key pair generation이 필요하다. 기존에 만들어둔 키가 있으면 사용해도 되고, 나는 없어서 ssh-keygen 명령어로 만들어줬다. 이 키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/$HOME/.ssh/&lt;/code&gt; 경로에 public key와 private key로 저장된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % ssh-keygen -t rsa -b 4096 -C &quot;email@email.com&quot; -f &quot;$HOME/.ssh/seb-admin&quot; -N &quot;&quot;
Generating public/private rsa key pair.
Your identification has been saved in /Users/mzc01-jiyoon/.ssh/seb-admin.
Your public key has been saved in /Users/mzc01-jiyoon/.ssh/seb-admin.pub.
The key fingerprint is:
SHA256:xxxx email@email.com
The key's randomart image is:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % cat web_infra.tf
resource &quot;aws_key_pair&quot; &quot;web_admin&quot; {
	key_name = &quot;web_admin&quot;
	public_key = file(&quot;/Users/mzc01-jiyoon/.ssh/seb-admin.pub&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Plan&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % terraform plan

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_key_pair.web_admin will be created
  + resource &quot;aws_key_pair&quot; &quot;web_admin&quot; { // tf file에다가 선언해놓은 상태랑 같게 만들께~라는 뜻
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = &quot;web_admin&quot;
      + key_pair_id = (known after apply)
      + public_key  = &quot;ssh-rsa == xxx...email@email.com&quot;
    }

Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테라폼의 동작 방식은 “리소서를 선언적으로 기술하기” 다.&lt;/p&gt;

&lt;p&gt;.tf파일에 기술되어 있는 모든 리소스를 읽어들이고, 이 리소스들이 먼저 존재하는 상태를 가정한다. (ideal한 상태) 아직 이 리소스가 실제로 생성된 적은 없으므로, provider에 지정한 AWS계정에는 존재하지 않는다.&lt;/p&gt;

&lt;p&gt;테라폼은 이 선언해놓은 ideal한 상태를 실제 상태랑 동일하게 만드는게 목표다. (약간 K8S랑 컨셉이 비슷해보임.. K8S도 yaml파일로 선언해놓고 쿠버가 비교를 통해 그 상태에 도달시켜줌)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % terraform apply

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_key_pair.web_admin: Creating...
aws_key_pair.web_admin: Creation complete after 0s [id=web_admin]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
mzc01-jiyoon@MZC01-JIYOON web_infra %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-ssh-접속-허용을-위한-security-group만들기&quot;&gt;2) SSH 접속 허용을 위한 Security Group만들기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt; tf파일에 계속 계속.. 추가&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % vim web_infra.tf

//아래쪽에 내용 추가
resource &quot;aws_security_group&quot; &quot;ssh&quot; {
	name = &quot;allow_ssh_from_all&quot;
	description = &quot;Allow SSH port from all&quot;
	ingress {
		from_port = 22
		to_port = 22
		protocol = &quot;tcp&quot;
		cidr_blocks = [&quot;0.0.0.0/0&quot;]
	}
}

// 이미 클라우드 기본 VPC에 기본으로 지정되어 있는 security group을 불러옴. 이 리소스를 데이터 소스로 불러오는 기능을 제공한다. 
data &quot;aws_security_group&quot; &quot;default&quot;{
	name = &quot;default&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Plan&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % terraform plan
aws_key_pair.web_admin: Refreshing state... [id=web_admin]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_security_group.ssh will be created
  + resource &quot;aws_security_group&quot; &quot;ssh&quot; {
      + arn                    = (known after apply)
      + description            = &quot;Allow SSH port from all&quot;
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + &quot;0.0.0.0/0&quot;, //모든 ip 허용
                ]
              + description      = &quot;&quot;
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = &quot;tcp&quot;
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = &quot;allow_ssh_from_all&quot;
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 리소스를 정의할 때 다른 리소스들의 속성을 참조할 수 있다. 그냥 블라블라~!@@#! 나열할 수도 있지만 속성으로 참조하는게 더 좋은 이유는 두 리소스 간에 의존 관계가 생기기 때문이다.&lt;/p&gt;

&lt;p&gt;처음에 tf 파일을 작성하면서, 그럼 security group을 instance보다 위에 선언해야 하나? 라는 의문점이 들었는데, 테라폼은 소스코드의 순서가 아니고 그래프 모델로 이런 의존 관계를 정의해서 생성할 순서를 결정한다고 한다.&lt;/p&gt;

&lt;p&gt;내가 따라해본 예제에서는 aws_key_pair.web_admin 리소스가 더 먼저 생성해주는걸 보장해줌.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 apply해주면 AWS console에 들어가서 이리보고 저리 봐도 내가 만든 all ip 허용 + 기본 security group + t2.micro에 내가 지정한 ami 조합의 인스턴스가 딱 나타난걸 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mzc01-jiyoon@MZC01-JIYOON web_infra % terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25656426/102163175-f97f0100-3ecd-11eb-998a-b4a7d1364d5f.png&quot; alt=&quot;aws_instance&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;테라폼을-사용하면서-주의해야-할-점&quot;&gt;테라폼을 사용하면서 주의해야 할 점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Sync 맞추기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;테라폼으로 인프라를 관리한다고 정하면, 이후에 manual 하게 콘솔에 들어가서 수정하거나 한  부분은 테라폼에 반영이 안된다. 테라폼으로만 쓰던, 콘솔로만 쓰던 하나만 정하던가 / manual하게 수정한 부분을 테라폼 코드에 반영하던가 해서 싱크를 맞춰야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 tf파일에 모든 인프라 구조를 다 선언하지 않기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모듈 단위로 안나누고 내가 한 실습처럼 하나 tf파일에 인프라를 다 선언하면 유지보수가 어려운 난관에 봉착할수밖에 없다. 코드 짠사람이야 금방 수정하겠지만 아니면 그 모든 코드를 다읽어야 하니깐 … 우엑 모듈을 잘게잘게 나눠서 설계를 먼저 잘 하는게 중요한 듯 싶다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;우와 테라폼은 진짜 신기.. 하다. 기본 vim 가지고 몇 자 끄적였더니 AWS 콘솔에 인스턴스가 나타났다. 신세계 그 자체다.&lt;/p&gt;

&lt;p&gt;HCL을 난 어제 처음봤지만, 테라폼 “코드를 작성하는 것 자체” 는 진입장벽이 높아보이진 않는다. 설계가 중요해보임. 새로운걸 알게 되어서 또 겁나 뿌듯함을 느낀다. 그전에는 뭘 해봐야하는지 공부해봐야하는지 아예 소스조차 없었는데 가닥이 잡히는 기분.&lt;/p&gt;

&lt;p&gt;요즘 클라우드 관련주를 모으고 있는데 하나 배우고 주식 사고 또 하나 공부하고 뽀개면 주식 사고하는게 재밌다.  고딩때는 스터디플래너에 완료 줄 하나 긋던걸 이제 어른이 되었으니 공부 시작하면 주식을 산다. 기분으로 주식 매수하는 사람 나야나.. 근데 테라폼 hashicorp 주식은 왜 취급 안하는걸까 진짜 살텐데..&lt;/p&gt;

&lt;p&gt;하여간 더 advanced 하게 테라폼을 이용해서 구축하게 되면 또 포스팅 해야겠다.&lt;/p&gt;

&lt;h3 id=&quot;출처&quot;&gt;출처&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;쓰면서 헷갈리는게 있어서 구글 검색했는데 IaC 4가지로 분류한 방식이 안나오는걸 보니깐 가르쳐주신 분이 생각하셨나??!!보다. 그렇다면 모든 저작권은 JH song님께..&lt;/li&gt;
  &lt;li&gt;실습은 &lt;a href=&quot;https://www.44bits.io/ko/post/terraform_introduction_infrastrucute_as_code&quot;&gt;https://www.44bits.io/ko/post/terraform_introduction_infrastrucute_as_code&lt;/a&gt; 여기 링크 참고했다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jiyoon, Park</name><email>parkjiyoon1042@gmail.com</email></author><category term="Kubernetes" /><category term="Kubernetes" /><category term="DevOps" /><category term="Prometheus" /><summary type="html">Terraform and IaC 기초</summary></entry><entry><title type="html">Kubernetes 1.20 개선사항</title><link href="http://localhost:4000/kubernetes/Kubernetes-1.20-Release/" rel="alternate" type="text/html" title="Kubernetes 1.20 개선사항" /><published>2020-12-09T00:00:00+09:00</published><updated>2020-12-09T00:00:00+09:00</updated><id>http://localhost:4000/kubernetes/Kubernetes%201.20%20Release</id><content type="html" xml:base="http://localhost:4000/kubernetes/Kubernetes-1.20-Release/">&lt;h1 id=&quot;kubernetes-120-개선사항&quot;&gt;Kubernetes 1.20 개선사항&lt;/h1&gt;

&lt;p&gt;2020년 올해의 마지막 릴리즈로 쿠버네티스 커뮤니티에서 kubernetes 1.20을 릴리즈했다.&lt;/p&gt;

&lt;p&gt;이번 릴리즈는 주로 안정성에 초점을 두고, 알파 단계에서 16개 / 베타 단계에서 15개 / 안정에서 11개 / 2개의 지원 중단으로 릴리스를 진행한다.&lt;/p&gt;

&lt;p&gt;1.20 Enhancements tracking에 대해 잘 정리된 시트를 아래에서 확인할 수 있다. 링크.. github document들 모아놓은 것만으로도 짱대박인듯&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Ch7PIapJhwdl83HEnYvwFNz96z3vk_eHnf8heLxxgyw/edit#gid=936265414&quot;&gt;https://docs.google.com/spreadsheets/d/1Ch7PIapJhwdl83HEnYvwFNz96z3vk_eHnf8heLxxgyw/edit#gid=936265414&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;알파-개선-사항&quot;&gt;알파 개선 사항&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;IPV4 / IPV6 듀얼 스택&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;포드에 IPV4, IPV6 주소를 모두 할당 가능하다. 오.. 포드 주소가 다채로워지겠군&lt;/p&gt;

&lt;p&gt;테스트 및 평가에 아직은 더 많은 시간을 할당하기 위해 알파로 남았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;정상적인 노드 종료&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;kubelet에서 종료가 발생하고 있는 신호를 워크로드한테 보내 워크로드가 이벤트를 정상적으로 준비할 수 있는 기회를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;로드밸런서를 위한 혼합 프로토콜&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로토콜이 서로 포트 정의가 다른 LB서비스를 만들 수 있다. 음.. 쿠버린이 아니 쿠버응애인 나는 이게 무슨말인지 이해가 안간다. 예전에는 둘 이상의 포트가 정의된 경우에 모든 포트가 동일한 프로토콜을 가져야했지만, 개선되었다고 한다.&lt;/p&gt;

&lt;p&gt;아 .. lb가 부하분산할때 사용하는 프로토콜을 포트 단위로도 분리해줄 수 있다는 말인가보다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;resource requests, limits에 대한 메트릭 노출&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아닛..! 포드 리소스랑 리밋을 메트릭으로 볼 수 있도록 하는 새로운 메트릭 endpoint가 스케줄러에 추가되었다. 쿠응애인 나에게 지금 인턴하는 회사에서 처음 맡겨주셨던 업무가 모니터링이었다. 그래서 쿠버 모니터링 쪽에 관련된 건 더 자세히 읽게 된다.(그나마 알만한 소리가 아주 조금 있는편..) Prometheus에서 pod별 resource requests, limits 에 대해 메트릭을 지원하지만, 이 새로운 엔드포인트를 도입하면 실제 클러스터  사용률이나 용량을 더 잘 설명하는데 도움이 될 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;베타-개선-사항&quot;&gt;베타 개선 사항&lt;/h3&gt;

&lt;p&gt;베타 향상은 예전에는 알파 형식으로 존재했지만 이제 안정적이어서 베타로 전환된 사항들을 말한단다.&lt;/p&gt;

&lt;p&gt;대규모 커뮤니티 프로젝트는 릴리즈 할 때 개선사항을 이렇게 알파 베타로 나누어서 릴리즈하는 모습이 가끔 보인다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;CronJob&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes 1.4에서 Scheduled jobs라는 이름으로 쓰이던 기능이 1.8에서 CronJob이라는 이름으로 베타로 전환되었다. 그럼 이번 1.20에서는 대체 뭘 한거지!! CronJob 컨트롤러의 도입이다. CronJob을 성공적으로 배포하고 성능문제 해결하도록 하는 중간.. 컨트롤러가 도입되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Kubectl Debug&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;원래 1.18에 있었던 kubectl debug 명령은 이번에 베타로 전환되었다. (kubectl 1.15까지만 경험해본 나는 kubectl debug명령어가 있는줄도 몰랐다) 이번에 새로 도입되는건 디버깅중인 포드의 복사본을 만들고 사용중인 이미지를 변경하는 기능이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Runtime class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pod describe를 해보면 보이는 PodSpec내에서 Runtimeclass를 지정하는 기능이 있따. kubernetes 1.14에서 베타로 승격되었었음. 이 기능이 이번에 안정화되면서 1.20에 베타로 편입&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;느리게 시작되는 포드에다가 시작 활성 상태 Probe hold off 추가&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이게 무슨 말이냐.. 어떤 워크로드는 시작하는데 오래걸릴 수 있다. 느리게 시작되면 문제가 생기는데,  “워크로드가 상태가 괜찮니??!! 나 이제 시작해도 되니??”를 검증하는 활성 상태 probe 과정에서 문제를 일으킬 수 있다는 게 그 문제다. 1.16 버전에 처음 도입된 startupProbe를 사용하면, pod가 정상적으로 시작될 때까지 이 문제검사검증 을 늦춰주는 기능이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;CSI Volume Snapshot&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;오..볼륨 스냅샷을 사용하는 기능이다. 1.17 이후 베타 상태를 유지했다고 함. 볼륨 스냅샷 작업을 트리거해주는 워크플로우를 지원하고, kuber환경이나 호환되는 스토리지 제공업체랑 통합을 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;향후-릴리즈는&quot;&gt;향후 릴리즈는?&lt;/h3&gt;

&lt;p&gt;앞으로 Kubernetes 출시 주기는.. 2021년에 3개의 릴리즈 계획이 있다고 한다.&lt;/p&gt;

&lt;p&gt;1.21은 1월에 시작! 해서 3월에 릴리즈 될 예정. 개인적으로 위에 알파 기능들 중에 어떤 친구가 안정화되어 베타로 전환될지 궁금하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;디디늉의 개인적인 생각&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한 1달쯤 전에 프로메테우스 관련되어서 배포를 하다가, 지원되는 버전이 안맞아서 메트릭이 안나오던 일이 있었다. 메트릭이 왜 안나오지? 의 이유에 관해 회사분들께 설명을 드리는 과정에서 숫자 1.14인지 1.15인지.. 1.16인지..를 까먹어서 허버허버어버버….훌루루룩.. 내 설명은 이렇게 신뢰를 잃어버렸고.. (이하생략…).&lt;/p&gt;

&lt;p&gt;그 때, 팀 리더님께서 릴리즈 넘버, 버전을 기억하는건 엔지니어한테 중요하다는 팁을 주신 이후로 버전업이랑 릴리즈에 관심을 갖게 되었다. 쿠버 릴리즈에 대해 관심을 갖고 능동적으로 찾아본건 이번이 처음이지만, 읽으면서 “내가 하고 있는 프로젝트에 이 기능을 만약에 도입한다면? 이게 어느 범위에 영향을 끼치려나? 부작용은?” 을 깊은 수준은 아니더라도 상상해보는 나를 볼 수 있었다. 만약에 운좋게 기회가 되어서 기능 배포를 맡게 되면 꼭 글을 또 써야겠다.&lt;/p&gt;

&lt;p&gt;참고한 링크&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tanzu.vmware.com/content/blog/kubernetes-1-20-a-big-release-to-celebrate-the-end-of-2020?src=so_5a314d05d9484&amp;amp;cid=70134000001SkJT&quot;&gt;https://tanzu.vmware.com/content/blog/kubernetes-1-20-a-big-release-to-celebrate-the-end-of-2020?src=so_5a314d05d9484&amp;amp;cid=70134000001SkJT&lt;/a&gt;&lt;/p&gt;</content><author><name>Jiyoon, Park</name><email>parkjiyoon1042@gmail.com</email></author><category term="Kubernetes" /><category term="Kubernetes" /><category term="DevOps" /><summary type="html">Kubernetes 1.20 개선사항</summary></entry><entry><title type="html">Prometheus Operator의 작동 방식</title><link href="http://localhost:4000/kubernetes/prometheus_test/" rel="alternate" type="text/html" title="Prometheus Operator의 작동 방식" /><published>2020-11-30T00:00:00+09:00</published><updated>2020-11-30T00:00:00+09:00</updated><id>http://localhost:4000/kubernetes/prometheus_test</id><content type="html" xml:base="http://localhost:4000/kubernetes/prometheus_test/">&lt;h1 id=&quot;prometheus-operator의-작동방식&quot;&gt;Prometheus operator의 작동방식&lt;/h1&gt;

&lt;h1 id=&quot;prometheus&quot;&gt;Prometheus&lt;/h1&gt;

&lt;p&gt;모니터링 도구로 최근 가장 주목받는 것&lt;/p&gt;

&lt;p&gt;Soundcloud에서 처음 개발해 현재 CNCF재단에서 관리하는 프로젝트&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25656426/99046696-77ea3980-25d6-11eb-9797-04ceb61a55a5.png&quot; alt=&quot;Prometheus%206d09cd3cd79945e6975b311b44614ffc:Untitled&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;

&lt;p&gt;시계열 데이터를 저장할 수 있는 다차원의 모델과 그 모델을 활용할 수 있는 promQL&lt;/p&gt;

&lt;p&gt;kube-prometheus-stack&lt;/p&gt;

&lt;p&gt;Install 목록&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubernetes manifests 콜렉션&lt;/li&gt;
  &lt;li&gt;그라파나 대시보드&lt;/li&gt;
  &lt;li&gt;prometheus&lt;/li&gt;
  &lt;li&gt;Prometheus operator를 포함함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus operator&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;핵심 아이디어는 모니터링 중인 엔터티의 구성에서 prometheus instance를 분리하는 것.&lt;/li&gt;
  &lt;li&gt;2개의 third party resource가 정의되어 있음 / prometheus / servicemonitor&lt;/li&gt;
  &lt;li&gt;operator는 클러스터의 각 리소스에 대해서 원하는 구성을 가진 prometheus server set가 실행되고 있는지 항상 확인함 (데이터 보존 시간, 영구 볼륨 클레임, 복제본 수… 매트릭에 대해 스크랩 할 모니터링 대상 및 매개 변수를 지정)&lt;/li&gt;
  &lt;li&gt;manually 지정할 수도 있고, operater 가 second TPR인 servicemontor 가 알아서 하도록 할 수 있음.&lt;/li&gt;
  &lt;li&gt;관리되는 Prometheus 서버를 성공적으로 만들었습니다. 그러나 구성을 제공하지 않았으므로 아직 아무것도 모니터링하지 않습니다. 각 Prometheus 배포는 자체 이름을 딴 Kubernetes ConfigMap을 마운트 합니다. 즉, Prometheus 서버는 네임 스페이스의 “prometheus-k8s”ConfigMap에 제공된 구성을 마운트합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prometheus operator 설치 시&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;prometheus-operator&lt;/em&gt; pod, the core of the stack, in charge of managing other deployments like Prometheus servers or Alertmanager servers&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;node-exporter&lt;/em&gt; pod per physical host (3 in this example)&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;kube-state-metrics&lt;/em&gt; exporter&lt;/li&gt;
  &lt;li&gt;The default Prometheus server deployment &lt;em&gt;prometheus-k8s&lt;/em&gt; (replicas: 2)&lt;/li&gt;
  &lt;li&gt;The default Alertmanager deployment &lt;em&gt;alertmanager-main&lt;/em&gt; (replicas: 3)&lt;/li&gt;
  &lt;li&gt;The Grafana deployment &lt;em&gt;grafana&lt;/em&gt; (replicas: 1)]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prometheus-operator-가-cluster-내-endpoint-를-알아내는-방식&quot;&gt;Prometheus operator 가 cluster 내 endpoint 를 알아내는 방식&lt;/h2&gt;

&lt;p&gt;there are two custom resources involved in this process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Prometheus CRD
    &lt;ul&gt;
      &lt;li&gt;Defines Prometheus server pod metadata&lt;/li&gt;
      &lt;li&gt;Defines # of Prometheus server replicas&lt;/li&gt;
      &lt;li&gt;Defines Alertmanager(s) endpoint to send triggered alert rules&lt;/li&gt;
      &lt;li&gt;Defines labels and namespace filters for the ServiceMonitor CRDs that will be applied by this Prometheus server deployment
        &lt;ul&gt;
          &lt;li&gt;The ServiceMonitor objects will provide the dynamic target endpoint configuration&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The ServiceMonitor CRD
    &lt;ul&gt;
      &lt;li&gt;Filters endpoints by namespace, labels, etc&lt;/li&gt;
      &lt;li&gt;Defines the different scraping ports&lt;/li&gt;
      &lt;li&gt;Defines all the additional scraping parameters like scraping interval, protocol to use, TLS credentials, re-labeling policies, etc.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;## Prometheus가 label_values를 알아내는 방법&lt;/p&gt;

    &lt;p&gt;label_values(kube_pod_info{cluster=”$cluster”}, node) 안되는거&lt;/p&gt;

    &lt;p&gt;label_values(node_uname_info{}, instance)&lt;/p&gt;

    &lt;p&gt;prometheus의 다양한 메트릭 정보를 수집해서 /metrics라는 엔드포인트로 제공해줌.&lt;/p&gt;

    &lt;p&gt;쿠버네티스 클러스터의 마스터 노드에 존재하는 kubernetes api와 통신하여 메트릭 정보를 수집하기 때문에 1개의 파드…&lt;/p&gt;

    &lt;p&gt;## Prometheus를 이용하여 모니터링 하는 영역&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;클러스터에 대한 정보 : kube-state-metrics로 수집함&lt;/li&gt;
      &lt;li&gt;노드에 대한 정보 : node exporter로 수집함&lt;/li&gt;
      &lt;li&gt;리소스 사용량에 대한 정보 : node, pod 등의 리소스 사용량을 수집함.&lt;/li&gt;
      &lt;li&gt;직접 만든 서비스에 대한 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prometheus-operator&quot;&gt;Prometheus Operator&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;install and provide same initial configuration and sizing for my deployment, according to the specs of my kuber cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관련 document&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coreos.com/blog/the-prometheus-operator.html&quot;&gt;https://coreos.com/blog/the-prometheus-operator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sysdig.com/blog/kubernetes-monitoring-prometheus-operator-part3/&quot;&gt;https://sysdig.com/blog/kubernetes-monitoring-prometheus-operator-part3/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;design document &lt;a href=&quot;https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md&quot;&gt;https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md&lt;/a&gt;&lt;/p&gt;</content><author><name>Jiyoon, Park</name><email>parkjiyoon1042@gmail.com</email></author><category term="Kubernetes" /><category term="Kubernetes" /><category term="DevOps" /><category term="Prometheus" /><summary type="html">Prometheus operator의 작동방식</summary></entry><entry><title type="html">글쓰기맹에서 탈출하기</title><link href="http://localhost:4000/ideas/%EA%B8%80%EC%93%B0%EA%B8%B0%EB%A7%B9%EC%97%90%EC%84%9C-%ED%83%88%EC%B6%9C%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="글쓰기맹에서 탈출하기" /><published>2020-11-28T00:00:00+09:00</published><updated>2020-11-28T00:00:00+09:00</updated><id>http://localhost:4000/ideas/%EA%B8%80%EC%93%B0%EA%B8%B0%EB%A7%B9%EC%97%90%EC%84%9C%20%ED%83%88%EC%B6%9C%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/ideas/%EA%B8%80%EC%93%B0%EA%B8%B0%EB%A7%B9%EC%97%90%EC%84%9C-%ED%83%88%EC%B6%9C%ED%95%98%EA%B8%B0/">&lt;h1 id=&quot;글쓰기맹에서-탈출하기&quot;&gt;글쓰기맹에서 탈출하기&lt;/h1&gt;

&lt;p&gt;여기 글쓰기를 시작 해야 하는 사람이 있다. 언젠가부터 머리에 든 지식을 내 밖으로 설명하고, 꺼내는데 어려움을 겪는다. 
사회생활을 시작하면서 이 능력은 나한테 더욱 필요하게 되었다. 사실은 내가 이해했던 것이 많은데 내가 이해했다는 사실을 제대로 전달하지 못해서 같은 과제를 여러번 받은 적이 한두번이 아니다.&lt;/p&gt;

&lt;p&gt;초중고생 때 글쓰기 부문에서 그렇게 상을 쓸어 담던 내가 왜 내가 글쓰기도 못하고, 말도 잘 못하고, 읽기까지 점점 어려워지는지 생각해봤다. 나는 학부에서 소프트웨어공학을 전공했다. 로직을 짜고, 안되면 “아주 직관적인” 오류메시지를 받는다. 
거의 항상 대부분 빨간색의 오류메시지를 받으면 초조해지기 시작한다. 오류 메시지를 복사해서, 구글에 검색하고 그 중에 가장 쉽고 빠르게  답을 찾을 수 있을 것 같은 사이트를 클릭해 빠른 길을 찾는다. 난 이렇게 효율적이고 빠르게 문제를 해결하는 법에 4년을 길들여져 있었다.&lt;/p&gt;

&lt;p&gt;그나마 작년에는 글을 좀 썼던 것 같다. 자기소개서 쓰면서. 취업준비라는 길을 나도 피해갈 수 없었기에 많은 시간을 자기 PR에 몰두했다. 
자기소개서를 쓰는데 남들보다 두배의 시간은 걸렸던 것 같다. 카페에서 3시간은 죽쳐야 문항 하나를 겨우 완성하는 수준이었다. 자기소개서 식 글쓰기는 더 어려웠다. 정해져 있는 글자수가 나를 너무 옥죄었다. 
사실 취준 해본 사람들은 알겠지만 자기소개서 틀도 거의 정해져 있었다. 메인 소제목 하나, 임팩트 될 문장 하나, 경험을 투영한 근거 문장 몇개. 자기소개서 식 글쓰기를 통해 알게된 장점은 딱 하나밖에 없다. 나는 글쓰기에서 끝마무리를 어려워한다는 점 하나.&lt;/p&gt;

&lt;p&gt;효율적이고 빠른 문제해결적 사고방식이 아니라 흐름에 따라 구조를 세워서 글을 적는 방식을 알아야 한다. 어제 친구한테 살짝 조언을 받았다. 
지금 글을 쓰기 시작하게 된게 친구 덕분이다. 공돌이임에도 불구하고 비트박스에서부터 원예 조경 글쓰기, 영상.. 자기가 좋아하는걸 찾아서 계속 도전하는 친구인데 그 친구는 글쓰기를 욕부터 시작했다고 했다. 군대에서 힘든 시간을 보냈고, 마음을 풀어낼 공간이 필요해서 일기 형식으로 글을 쓰게 되었다고 했다. 나도 작은것부터 시작하라고 했다.&lt;/p&gt;

&lt;p&gt;그 친구는 어딘가에 집을 지어 비트박스도 하고, 찾아오는 사람들하고 얘기하고, 약간의 게스트하우스 같은 community를 만드는게 꿈이라고 했다. 나는 지금부터 글을 차근차근 하나씩 써 나가서 그 친구 집에 한 문장 걸어놓는걸 목표로 하기로 했다.&lt;/p&gt;</content><author><name>Jiyoon, Park</name><email>parkjiyoon1042@gmail.com</email></author><category term="Ideas" /><category term="Kubernetes" /><category term="DevOps" /><summary type="html">글쓰기맹에서 탈출하기</summary></entry></feed>